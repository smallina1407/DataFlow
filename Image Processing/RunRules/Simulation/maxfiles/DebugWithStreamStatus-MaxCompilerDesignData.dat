#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2015
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          46195
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-11-17"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "DebugWithStreamStatus"
#define MAXFILE_BUILD_DIR  "/tmp/DebugWithStreamStatus_MAIA_DFE_SIM"
#define MAXFILE_BUILD_DATE  20161212
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 35)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX4848A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "DebugWithStreamStatusKernel.h"
#endif










#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(DebugWithStreamStatusKernel, Kernel)
MANAGER_NODE(x, PCIe_From_Host)
MANAGER_NODE(y, PCIe_To_Host)
MANAGER_NODE(Stream_1, DualAspectMux)
MANAGER_NODE(Stream_6, DualAspectReg)
MANAGER_NODE(Stream_14, StreamPullPushAdapter)
MANAGER_NODE(Stream_8, Fifo)
MANAGER_NODE(Stream_10, Fifo)
MANAGER_NODE(Stream_12, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(DebugWithStreamStatusKernel, x, IN, STREAM, 32, PULL)
MANAGER_NODE_IO(DebugWithStreamStatusKernel, y, OUT, STREAM, 32, PUSH)
MANAGER_NODE_IO(x, x, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(y, y, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_1, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_1, output, OUT, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_6, input, IN, PCIE, 32, PULL)
MANAGER_NODE_IO(Stream_6, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, input, IN, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_14, output, OUT, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, input, IN, PCIE, 128, PUSH)
MANAGER_NODE_IO(Stream_8, output, OUT, PCIE, 128, PULL)
MANAGER_NODE_IO(Stream_10, input, IN, PCIE, 32, PUSH)
MANAGER_NODE_IO(Stream_10, output, OUT, STREAM, 32, PULL)
MANAGER_NODE_IO(Stream_12, input, IN, STREAM, 32, PUSH)
MANAGER_NODE_IO(Stream_12, output, OUT, PCIE, 32, PULL)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(x, x, Stream_8, input, 128)
MANAGER_STREAM(DebugWithStreamStatusKernel, y, Stream_12, input, 32)
MANAGER_STREAM(Stream_1, output, Stream_10, input, 32)
MANAGER_STREAM(Stream_6, output, Stream_14, input, 128)
MANAGER_STREAM(Stream_14, output, y, y, 128)
MANAGER_STREAM(Stream_8, output, Stream_1, input, 128)
MANAGER_STREAM(Stream_10, output, DebugWithStreamStatusKernel, x, 32)
MANAGER_STREAM(Stream_12, output, Stream_6, input, 32)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(DebugWithStreamStatusKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(x, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(y, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_1, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_6, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_14, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_8, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_10, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
MANAGER_NODE_STACK_TRACE(Stream_12, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(DebugWithStreamStatusKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(DebugWithStreamStatusKernel)
#endif

#ifdef KERNEL_HOST_CONTROLLED
#define KERNEL_HOST_CONTROLLED_PRESENT 1
KERNEL_HOST_CONTROLLED(DebugWithStreamStatusKernel, DebugWithStreamStatusKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(DebugWithStreamStatusKernel, x, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(DebugWithStreamStatusKernel, y, 0)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(x, PCIePushSourceSyncMax4, "x")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_8, FifoPushToPullSync, "Stream_8", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_1, DualAspectMuxSync, "Stream_1", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_10, FifoPushToPullSync, "Stream_10", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(DebugWithStreamStatusKernel, DebugWithStreamStatusKernel, "DebugWithStreamStatusKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_12, FifoPushToPullSync, "Stream_12", false, 512, 32)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_6, DualAspectRegSync, "Stream_6", 32, 4)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_14, PullToPushAdapterSync, "Stream_14")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(y, PCIePushSinkSyncMax3, "y")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 35)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "0527a05224a763bee72376b2ead5591ec7a97d14bcab9c099fcf224aa189f7d6")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_fill_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_flush_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_flush_start_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_full_level, 4, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(DebugWithStreamStatusKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(x, STREAM_FROM_HOST, 0)
PCIE_STREAM(y, STREAM_TO_HOST, 0)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(DebugWithStreamStatusKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DebugWithStreamStatusKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(DebugWithStreamStatusKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DebugWithStreamStatusKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(DebugWithStreamStatusKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_ctld_done, 0xf, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_ctld_empty, 0x10, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_ctld_read, 0x11, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3))
REG(DebugWithStreamStatusKernel.dbg_ctld_request, 0x13, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_done_out, 0x14, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_fill_level, 0x15, 1, hwBits(4))
REG(DebugWithStreamStatusKernel.dbg_flush_level, 0x16, 1, hwBits(4))
REG(DebugWithStreamStatusKernel.dbg_flush_start, 0x17, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_flush_start_level, 0x18, 1, hwBits(4))
REG(DebugWithStreamStatusKernel.dbg_flushing, 0x19, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_full_level, 0x1a, 1, hwBits(4))
REG(DebugWithStreamStatusKernel.dbg_out_stall, 0x1b, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_out_valid, 0x1c, 1, hwBits(1))
REG(DebugWithStreamStatusKernel.dbg_stall_vector, 0x1d, 1, hwBits(1))
REG(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(DebugWithStreamStatusKernel.io_x_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DebugWithStreamStatusKernel.io_y_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(DebugWithStreamStatusKernel.run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.current_run_cycle_count, 0x8, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_almost_empty, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_done, 0xf, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_empty, 0x10, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_read, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_read_pipe_dbg, 0x12, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_ctld_request, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_done_out, 0x14, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_fill_level, 0x15, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_flush_level, 0x16, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_flush_start, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_flush_start_level, 0x18, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_flushing, 0x19, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_full_level, 0x1a, 1, hwBits(4), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_out_stall, 0x1b, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_out_valid, 0x1c, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(DebugWithStreamStatusKernel.dbg_stall_vector, 0x1d, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x1e, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x1f, 4, hwBits(32), HOST_READ_WRITE, false)
#endif




#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("0527a05224a763bee72376b2ead5591ec7a97d14bcab9c099fcf224aa189f7d6")
#endif




#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAIAREV, MAIAREVA)
CAPABILITY(MAIARAM, DDR3_48GB)
CAPABILITY(MAIAFPGA, 5SGSMD8N2F45C2)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME DebugWithStreamStatus
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_DebugWithStreamStatus_H
#define SLIC_DECLARATIONS_DebugWithStreamStatus_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define DebugWithStreamStatus_PCIE_ALIGNMENT (16)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [in] param_N Interface Parameter "N".
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_y The stream should be of size (param_N * 4) bytes.
 */
void DebugWithStreamStatus(
	int64_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_y);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [in] param_N Interface Parameter "N".
 * \param [in] instream_x The stream should be of size (param_N * 4) bytes.
 * \param [out] outstream_y The stream should be of size (param_N * 4) bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_nonblock(
	int64_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_y);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	int64_t param_N; /**<  [in] Interface Parameter "N". */
	const uint32_t *instream_x; /**<  [in] The stream should be of size (param_N * 4) bytes. */
	uint32_t *outstream_y; /**<  [out] The stream should be of size (param_N * 4) bytes. */
} DebugWithStreamStatus_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void DebugWithStreamStatus_run(
	max_engine_t *engine,
	DebugWithStreamStatus_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_run_nonblock(
	max_engine_t *engine,
	DebugWithStreamStatus_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void DebugWithStreamStatus_run_group(max_group_t *group, DebugWithStreamStatus_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_run_group_nonblock(max_group_t *group, DebugWithStreamStatus_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void DebugWithStreamStatus_run_array(max_engarray_t *engarray, DebugWithStreamStatus_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_run_array_nonblock(max_engarray_t *engarray, DebugWithStreamStatus_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* DebugWithStreamStatus_convert(max_file_t *maxfile, DebugWithStreamStatus_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* DebugWithStreamStatus_init(void);

/* Error handling functions */
int DebugWithStreamStatus_has_errors(void);
const char* DebugWithStreamStatus_get_errors(void);
void DebugWithStreamStatus_clear_errors(void);
/* Free statically allocated maxfile data */
void DebugWithStreamStatus_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int DebugWithStreamStatus_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int DebugWithStreamStatus_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_DebugWithStreamStatus_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 4, NodeInputMappedReg, "Scalar input (io_y_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:19)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 5, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:19)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 0, NodeInputMappedReg, "Scalar input (io_x_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:17)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 1, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:17)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 2, NodeInput, "Input(x)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:606)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:17)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 7, NodeOutput, "Output(y)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:816)\ndebugwithstreamstatus.DebugWithStreamStatusKernel.<init>(DebugWithStreamStatusKernel.maxj:19)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:23)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 12, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 21, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 9, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 10, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 11, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 13, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 20, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 15, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 16, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 18, NodeInputMappedReg, "Scalar input (run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 19, NodeEq, "==", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
PHOTON_NODE_DATA(DebugWithStreamStatusKernel, 17, NodeFlush, "flush on trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:373)\ndebugwithstreamstatus.DebugWithStreamStatusManager.main(DebugWithStreamStatusManager.maxj:28)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int DebugWithStreamStatus_has_errors(void)
{	return stored_has_error; }
const char* DebugWithStreamStatus_get_errors(void)
{	return stored_error; }
void DebugWithStreamStatus_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char DebugWithStreamStatus_use_simulation[16];
static void DebugWithStreamStatus_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(DebugWithStreamStatus_use_simulation, 16, "DebugWit_%05ld_", pid);
}
static const char *DebugWithStreamStatus_check_use_simulation(void)
{
	DebugWithStreamStatus_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = DebugWithStreamStatus_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int DebugWithStreamStatus_simulation_launch = 0;
int DebugWithStreamStatus_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = DebugWithStreamStatus_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int DebugWithStreamStatus_simulator_stop(void)
{
	const char *use_sim = DebugWithStreamStatus_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX4848A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void DebugWithStreamStatus_static_init(void) 
{
	stored_maxfile = DebugWithStreamStatus_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = DebugWithStreamStatus_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = DebugWithStreamStatus_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			DebugWithStreamStatus_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void DebugWithStreamStatus_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (DebugWithStreamStatus_simulation_launch == 1) {
		int sim_stat = DebugWithStreamStatus_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		DebugWithStreamStatus_simulation_launch = 0;
	}
}

static int DebugWithStreamStatus_get_pcie_alignment(void)
{
#ifdef DebugWithStreamStatus_PCIE_ALIGNMENT
	return ((DebugWithStreamStatus_PCIE_ALIGNMENT < 1) ? 16 : DebugWithStreamStatus_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int DebugWithStreamStatus_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = DebugWithStreamStatus_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *DebugWithStreamStatus_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = DebugWithStreamStatus_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct DebugWithStreamStatus_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} DebugWithStreamStatus_callback_stream_t;

typedef struct DebugWithStreamStatus_callback_data {
	DebugWithStreamStatus_callback_stream_t stream[2]; 
	int count;
	int max_count;
} DebugWithStreamStatus_callback_data_t;

static void DebugWithStreamStatus_callback_internal(void *cb_data)
{
	DebugWithStreamStatus_callback_data_t *data = (DebugWithStreamStatus_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		DebugWithStreamStatus_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* DebugWithStreamStatus_convert_internal(
	max_file_t *maxfile,
	DebugWithStreamStatus_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	DebugWithStreamStatus_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(DebugWithStreamStatus_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function DebugWithStreamStatus_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &DebugWithStreamStatus_callback_internal;
	}

	int64_t param_N = interface_actions->param_N;
	
	/* code for scalar DebugWithStreamStatusKernel.run_cycle_count */
	uint64_t ticks_DebugWithStreamStatusKernel = param_N;
	max_set_ticks(actions, "DebugWithStreamStatusKernel", param_N);
	CHECK_ERRORS;
	/* end of code for scalar DebugWithStreamStatusKernel.run_cycle_count*/
	
	int64_t tmp_0 = (param_N * 4);
	
	/* code for stream x */
	size_t instream_size_x = tmp_0;
	if (instream_size_x > 0) {
		const uint32_t *stream_ptr = interface_actions->instream_x;
		if (use_callback && (1 == DebugWithStreamStatus_check_aligned(interface_actions->instream_x))) {
			uint32_t *aligned_instream_x = malloc(instream_size_x);
			if (aligned_instream_x == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'x'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_x;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_x;
			(&cb_data->stream[cb_data->count])->size        = instream_size_x;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_x, interface_actions->instream_x, instream_size_x);
			stream_ptr = aligned_instream_x;
		}
		max_queue_input(actions, "x", stream_ptr, instream_size_x);
		CHECK_ERRORS;
	}
	/* end of code for stream x */
	
	int64_t tmp_1 = (param_N * 4);
	
	/* code for stream y */
	size_t outstream_size_y = tmp_1;
	if (outstream_size_y > 0) {
		uint32_t *stream_ptr = interface_actions->outstream_y;
		if (use_callback && (1 == DebugWithStreamStatus_check_aligned(interface_actions->outstream_y))) {
			uint32_t *aligned_outstream_y = malloc(outstream_size_y);
			if (aligned_outstream_y == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'y'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_y;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_y;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_y;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_y;
		}
		max_queue_output(actions, "y", stream_ptr, outstream_size_y);
		CHECK_ERRORS;
	}
	/* end of code for stream y */
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void DebugWithStreamStatus(
	int64_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_y)
{
	(void) pthread_once(&slic_bs_is_initialised, DebugWithStreamStatus_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = DebugWithStreamStatus_nonblock(param_N, instream_x, outstream_y);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *DebugWithStreamStatus_nonblock(
	int64_t param_N,
	const uint32_t *instream_x,
	uint32_t *outstream_y)
{
	DebugWithStreamStatus_actions_t interface_actions;
	interface_actions.param_N = param_N;
	interface_actions.instream_x = instream_x;
	interface_actions.outstream_y = outstream_y;
	(void) pthread_once(&slic_bs_is_initialised, DebugWithStreamStatus_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = DebugWithStreamStatus_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void DebugWithStreamStatus_run(
	max_engine_t *engine,
	DebugWithStreamStatus_actions_t *interface_actions)
{
	max_run_t *run = DebugWithStreamStatus_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *DebugWithStreamStatus_run_nonblock(
	max_engine_t *engine,
	DebugWithStreamStatus_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = DebugWithStreamStatus_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void DebugWithStreamStatus_run_group(max_group_t *group, DebugWithStreamStatus_actions_t *interface_actions)
{
	max_run_t *run = DebugWithStreamStatus_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_run_group_nonblock(max_group_t *group, DebugWithStreamStatus_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = DebugWithStreamStatus_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void DebugWithStreamStatus_run_array(max_engarray_t *engarray, DebugWithStreamStatus_actions_t *interface_actions[])
{
	max_run_t *run = DebugWithStreamStatus_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *DebugWithStreamStatus_run_array_nonblock(max_engarray_t *engarray, DebugWithStreamStatus_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = DebugWithStreamStatus_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* DebugWithStreamStatus_convert(max_file_t *maxfile, DebugWithStreamStatus_actions_t *interface_actions)
{
	return DebugWithStreamStatus_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_PARAMETER_UINT64(int64_t, N, param_N)	
SLIC_SET_TICKS(DebugWithStreamStatusKernel, param_N)	
SLIC_TEMP_VAR(int64_t tmp_0 = (param_N * 4);)	
SLIC_STREAM(x, tmp_0)	
SLIC_TEMP_VAR(int64_t tmp_1 = (param_N * 4);)	
SLIC_STREAM(y, tmp_1)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkRlYnVnV2l0aFN0cmVhbVN0
YXR1cy5oIiBuYW1lPSJEZWJ1Z1dpdGhTdHJlYW1TdGF0dXMiPjxjb25zdGFudCBuYW1lPSJQQ0lF
X0FMSUdOTUVOVCIgdHlwZT0ibG9uZyIgdmFsdWU9IjE2Ii8+PGVuZ2luZW1vZGUgbmFtZT0iZGVm
YXVsdCI+PGZ1bmN0aW9uIG5hbWU9IkRlYnVnV2l0aFN0cmVhbVN0YXR1cyIgcmV0dXJuLXZhbHVl
PSJ2b2lkIj48c2NhbGFyIGRlc2M9IkludGVyZmFjZSBQYXJhbWV0ZXIgJnF1b3Q7TiZxdW90Oy4i
IGRpcmVjdGlvbj0iSW5wdXQiIG5hbWU9InBhcmFtX04iIHR5cGU9ImludDY0X3QiLz48YXJyYXkg
ZGVzYz0iVGhlIHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIg
ZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1feCIgc2l6ZT0iKHBhcmFtX04gKiA0KSIg
dHJhbnNwb3NlPSJ0cnVlIiB0eXBlPSJ1aW50MzJfdCI+PGRpbWVuc2lvbiBpbmRleD0iMCI+PGxl
bmd0aD48ZnVuY3Rpb25DYWxsPjxudW1CaW5hcnlPcGVyYXRvciBvcGVyYXRvcj0iLyIgdmFsdWU9
IigocGFyYW1fTiAqIDQpIC8gNCkiPjxmdW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9w
ZXJhdG9yPSIqIiB2YWx1ZT0iKHBhcmFtX04gKiA0KSI+PHVzZXJQYXJhbSB2YWx1ZT0icGFyYW1f
TiIvPjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0
aW9uQ2FsbD48Y29uc3RhbnRWYWx1ZSB2YWx1ZT0iNCIvPjwvbnVtQmluYXJ5T3BlcmF0b3I+PC9m
dW5jdGlvbkNhbGw+PC9sZW5ndGg+PC9kaW1lbnNpb24+PC9hcnJheT48YXJyYXkgZGVzYz0iVGhl
IHN0cmVhbSBzaG91bGQgYmUgb2Ygc2l6ZSAocGFyYW1fTiAqIDQpIGJ5dGVzLiIgZGlyZWN0aW9u
PSJPdXRwdXQiIG5hbWU9Im91dHN0cmVhbV95IiBzaXplPSIocGFyYW1fTiAqIDQpIiB0cmFuc3Bv
c2U9InRydWUiIHR5cGU9InVpbnQzMl90Ij48ZGltZW5zaW9uIGluZGV4PSIwIj48bGVuZ3RoPjxm
dW5jdGlvbkNhbGw+PG51bUJpbmFyeU9wZXJhdG9yIG9wZXJhdG9yPSIvIiB2YWx1ZT0iKChwYXJh
bV9OICogNCkgLyA0KSI+PGZ1bmN0aW9uQ2FsbD48bnVtQmluYXJ5T3BlcmF0b3Igb3BlcmF0b3I9
IioiIHZhbHVlPSIocGFyYW1fTiAqIDQpIj48dXNlclBhcmFtIHZhbHVlPSJwYXJhbV9OIi8+PGNv
bnN0YW50VmFsdWUgdmFsdWU9IjQiLz48L251bUJpbmFyeU9wZXJhdG9yPjwvZnVuY3Rpb25DYWxs
Pjxjb25zdGFudFZhbHVlIHZhbHVlPSI0Ii8+PC9udW1CaW5hcnlPcGVyYXRvcj48L2Z1bmN0aW9u
Q2FsbD48L2xlbmd0aD48L2RpbWVuc2lvbj48L2FycmF5PjwvZnVuY3Rpb24+PC9lbmdpbmVtb2Rl
PjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfaGFzX2Vycm9ycyh2b2lkKQp7CXJldHVybiBz
dG9yZWRfaGFzX2Vycm9yOyB9CmNvbnN0IGNoYXIqIERlYnVnV2l0aFN0cmVhbVN0YXR1c19nZXRf
ZXJyb3JzKHZvaWQpCnsJcmV0dXJuIHN0b3JlZF9lcnJvcjsgfQp2b2lkIERlYnVnV2l0aFN0cmVh
bVN0YXR1c19jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVk
X2Vycm9yID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBEZWJ1
Z1dpdGhTdHJlYW1TdGF0dXNfdXNlX3NpbXVsYXRpb25bMTZdOwpzdGF0aWMgdm9pZCBEZWJ1Z1dp
dGhTdHJlYW1TdGF0dXNfZGVmX3VzZV9zaW11bGF0aW9uKHZvaWQpCnsKCWxvbmcgcGlkID0gKChs
b25nKSBnZXRwaWQoKSkgJSAxMDAwMDA7CglzbnByaW50ZihEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNf
dXNlX3NpbXVsYXRpb24sIDE2LCAiRGVidWdXaXRfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29u
c3QgY2hhciAqRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NoZWNrX3VzZV9zaW11bGF0aW9uKHZvaWQp
CnsKCURlYnVnV2l0aFN0cmVhbVN0YXR1c19kZWZfdXNlX3NpbXVsYXRpb24oKTsKCWNvbnN0IGNo
YXIgKnVzZV9zaW0gPSBtYXhfY29uZmlnX2dldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxB
VElPTik7CglpZiAodXNlX3NpbSA9PSBOVUxMKSB7CgkJdXNlX3NpbSA9IERlYnVnV2l0aFN0cmVh
bVN0YXR1c191c2Vfc2ltdWxhdGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJ
R19VU0VfU0lNVUxBVElPTiwgdXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGlj
IGludCBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwppbnQgRGVi
dWdXaXRoU3RyZWFtU3RhdHVzX3NpbXVsYXRvcl9zdGFydCh2b2lkKQp7CglpbnQgcmV0dmFsID0g
MDsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQ
QVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEg
LVMgc2ltdXRpbHMgcmVzdGFydCIsIHVzZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1
ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFp
bGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVm
Zik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9
IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0
cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwg
IkVycm9yIikpIHsKCQkJc2V0X2Vycm9yKGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9Cglw
Y2xvc2UocGlwZV9mcCk7CglyZXR1cm4gcmV0dmFsOwp9CgppbnQgRGVidWdXaXRoU3RyZWFtU3Rh
dHVzX3NpbXVsYXRvcl9zdG9wKHZvaWQpCnsKCWNvbnN0IGNoYXIgKnVzZV9zaW0gPSBEZWJ1Z1dp
dGhTdHJlYW1TdGF0dXNfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVmZlsxMDI0XTsK
CXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNvbXBpbGVyc2lt
IC1kIDEgLW4gJXMgLWMgTUFYNDg0OEEgLVMgc2ltdXRpbHMgc3RvcCIsIHVzZV9zaW0pOwoJRklM
RSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9PSBOVUxMKSB7CgkJ
c3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQgLSBzdHJsZW4oYnVm
ZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hpbGUgKGZnZXRzKGJ1
ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQgdGhpcyB0byBnZXQg
c2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRlcnIsIGJ1ZmYpOyAq
LwoJCTsKCX0KCXBjbG9zZShwaXBlX2ZwKTsKCXJldHVybiAwOwp9CgpzdGF0aWMgdm9pZCBEZWJ1
Z1dpdGhTdHJlYW1TdGF0dXNfc3RhdGljX2luaXQodm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0g
RGVidWdXaXRoU3RyZWFtU3RhdHVzX2luaXQoKTsKCWlmIChzdG9yZWRfbWF4ZmlsZSA9PSBOVUxM
IHx8ICFtYXhfb2soc3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlzdG9yZWRfbWF4ZmlsZSA9
IE5VTEw7CgkJaWYobWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZB
Q0VfQUJPUlRfT05fRVJST1IpKSBhYm9ydCgpOwoJCWVsc2UgeyBzZXRfZXJyb3IoIlVuYWJsZSB0
byBsb2FkIG1heGZpbGUiKTsgcmV0dXJuOyB9Cgl9CglpZighbWF4X29rKG1heF9nbG9iYWxfZXJy
b3JzKCkpKSB7CgkJc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJhY2UobWF4X2dsb2Jh
bF9lcnJvcnMoKSkpOwoJCXJldHVybjsKCX0KCWlmKCFtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpCgkJbWF4X2Vycm9yc19tb2Rl
KHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMsIDApOwoJdGltZV90IHRpbWVvdXRfcHJldmlvdXMgPSBt
YXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCAzMCk7Cgljb25zdCBjaGFyICp1c2Vfc2lt
ID0gRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NoZWNrX3VzZV9zaW11bGF0aW9uKCk7CglpZiAobWF4
X3BpbmdfZGFlbW9uKHN0b3JlZF9tYXhmaWxlLCB1c2Vfc2ltKSA9PSAwKSB7CgkJaW50IHNpbV9z
dGF0ID0gRGVidWdXaXRoU3RyZWFtU3RhdHVzX3NpbXVsYXRvcl9zdGFydCgpOwoJCWlmICgoc2lt
X3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9yZWRfbWF4ZmlsZSwgdXNlX3NpbSkg
PT0gMSkpIHsKCQkJRGVidWdXaXRoU3RyZWFtU3RhdHVzX3NpbXVsYXRpb25fbGF1bmNoID0gMTsK
CQl9IGVsc2UgewoJCQlzZXRfZXJyb3IoIkVycm9yOiBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSB0
cnlpbmcgdG8gc3RhcnQgdGhlIHNpbXVsYXRpb24gaW5mcmFzdHJ1Y3R1cmUgYXV0b21hdGljYWxs
eS4iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQ2hlY2sgdGhhdCAndXNlX3NpbXVsYXRpb249PHNp
bXVsYXRvcl9uYW1lPicgaXMgc2V0IGNvcnJlY3RseSBpbiB5b3VyIFNMaUMgY29uZmlndXJhdGlv
biIpOwoJCQlzZXRfZXJyb3IoIkVycm9yOiBhbmQgdGhhdCB0aGUgYXNzb2NpYXRlZCBzaW11bGF0
ZWQgc3lzdGVtIGRhZW1vbiBpcyBydW5uaW5nLiIpOwoJCQltYXhfZmlsZV9mcmVlKHN0b3JlZF9t
YXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47CgkJfQoJfQoJc3Rv
cmVkX2VuZ2luZSA9IG1heF9sb2FkKHN0b3JlZF9tYXhmaWxlLCAiKiIpOwoJaWYgKCFtYXhfb2so
c3RvcmVkX21heGZpbGUtPmVycm9ycykpIHsKCQlpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9D
T05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsKCQkJZnByaW50ZihzdGRl
cnIsICJcblVuYWJsZSB0byBsb2FkIGVuZ2luZTogYWJvcnRpbmcgbm93LlxuXG4iKTsKCQkJZmZs
dXNoKHN0ZGVycik7CgkJCWFib3J0KCk7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yX2FuZF9mcmVl
KG1heF9lcnJvcnNfdHJhY2Uoc3RvcmVkX21heGZpbGUtPmVycm9ycykpOwoJCQltYXhfZmlsZV9m
cmVlKHN0b3JlZF9tYXhmaWxlKTsKCQkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCQlyZXR1cm47
CgkJfSAKCX0gCgltYXhfbG9hZF90aW1lb3V0KHN0b3JlZF9tYXhmaWxlLCB0aW1lb3V0X3ByZXZp
b3VzKTsKfQp2b2lkIERlYnVnV2l0aFN0cmVhbVN0YXR1c19mcmVlKHZvaWQpCnsKCWlmIChzdG9y
ZWRfZW5naW5lICE9IE5VTEwpIHsKCQltYXhfdW5sb2FkKHN0b3JlZF9lbmdpbmUpOwoJCXN0b3Jl
ZF9lbmdpbmUgPSBOVUxMOwoJfQoJaWYgKHN0b3JlZF9tYXhmaWxlICE9IE5VTEwpIHsKCQltYXhf
ZmlsZV9mcmVlKHN0b3JlZF9tYXhmaWxlKTsKCQlzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7Cgl9Cglp
ZiAoc3RvcmVkX2Vycm9yICE9IE5VTEwpIHsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJc3RvcmVk
X2Vycm9yID0gTlVMTDsKCX0KCWlmIChEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfc2ltdWxhdGlvbl9s
YXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IERlYnVnV2l0aFN0cmVhbVN0YXR1c19zaW11
bGF0b3Jfc3RvcCgpOwoJCWlmIChzaW1fc3RhdCAhPSAwICkgewoJCQlmcHJpbnRmKHN0ZGVyciwg
IkVycm9yIHN0b3BwaW5nIHNpbXVsYXRvci4iKTsKCQl9CgkJRGVidWdXaXRoU3RyZWFtU3RhdHVz
X3NpbXVsYXRpb25fbGF1bmNoID0gMDsKCX0KfQoKc3RhdGljIGludCBEZWJ1Z1dpdGhTdHJlYW1T
dGF0dXNfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIERlYnVnV2l0aFN0cmVhbVN0
YXR1c19QQ0lFX0FMSUdOTUVOVAoJcmV0dXJuICgoRGVidWdXaXRoU3RyZWFtU3RhdHVzX1BDSUVf
QUxJR05NRU5UIDwgMSkgPyAxNiA6IERlYnVnV2l0aFN0cmVhbVN0YXR1c19QQ0lFX0FMSUdOTUVO
VCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IERlYnVnV2l0aFN0cmVh
bVN0YXR1c19jaGVja19hbGlnbmVkKGNvbnN0IHZvaWQgKmRhdGEpCnsKCXVpbnRwdHJfdCBwb2lu
dGVyID0gKHVpbnRwdHJfdCkgZGF0YTsKCWludCBhbGlnbm1lbnQgPSBEZWJ1Z1dpdGhTdHJlYW1T
dGF0dXNfZ2V0X3BjaWVfYWxpZ25tZW50KCk7CglyZXR1cm4gKHBvaW50ZXIgJSBhbGlnbm1lbnQp
ID8gMSA6IDA7Cn0KCnN0YXRpYyB2b2lkICpEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfbWFsbG9jX2Fs
aWduZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBE
ZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfZ2V0X3BjaWVfYWxpZ25tZW50KCk7Cglwb3NpeF9tZW1hbGln
bigmcHRyLCBhbGlnbm1lbnQsIHNpemUpOwoJcmV0dXJuIHB0cjsKfQoKCgovKi0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJmYWNlIGRlZmF1
bHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwovKi0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0q
LwoKCgojZGVmaW5lIENIRUNLX0VSUk9SU19TVChTVCwgUkVUKSBpZighbWF4X29rKFNULT5lcnJv
cnMpKSB7IGlmKG1heF9jb25maWdfZ2V0X2Jvb2woTUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNF
X0FCT1JUX09OX0VSUk9SKSkgeyBmcHJpbnRmKHN0ZGVyciwgIiVzXG4iLCBtYXhfZXJyb3JzX3Ry
YWNlKFNULT5lcnJvcnMpKTsgYWJvcnQoKTsgfSBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9y
c190cmFjZShTVC0+ZXJyb3JzKSk7IHJldHVybiBSRVQ7IH0gCiNkZWZpbmUgQ0hFQ0tfTlVMTChW
QUxVRSwgTUVTU0FHRSwgUkVUKSBpZihWQUxVRSA9PSBOVUxMKSB7IGlmIChtYXhfY29uZmlnX2dl
dF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9SVF9PTl9FUlJPUikpIHsgZnBy
aW50ZihzdGRlcnIsICIlc1xuJXNcbiIsIChzdG9yZWRfZXJyb3IgPT0gTlVMTCkgPyAiIiA6IHN0
b3JlZF9lcnJvciwgTUVTU0FHRSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yKE1FU1NBR0UpOyByZXR1
cm4gUkVUOyB9CgogCnR5cGVkZWYgc3RydWN0IERlYnVnV2l0aFN0cmVhbVN0YXR1c19jYWxsYmFj
a19zdHJlYW0gewoJdWludDhfdCAqdXNlcl9wdHI7Cgl1aW50OF90ICphbGlnbmVkX3B0cjsKCXNp
emVfdCAgIHNpemU7CglpbnQgICAgICBpc19vdXRwdXQ7Cn0gRGVidWdXaXRoU3RyZWFtU3RhdHVz
X2NhbGxiYWNrX3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgRGVidWdXaXRoU3RyZWFtU3RhdHVz
X2NhbGxiYWNrX2RhdGEgewoJRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NhbGxiYWNrX3N0cmVhbV90
IHN0cmVhbVsyXTsgCglpbnQgY291bnQ7CglpbnQgbWF4X2NvdW50Owp9IERlYnVnV2l0aFN0cmVh
bVN0YXR1c19jYWxsYmFja19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBEZWJ1Z1dpdGhTdHJlYW1TdGF0
dXNfY2FsbGJhY2tfaW50ZXJuYWwodm9pZCAqY2JfZGF0YSkKewoJRGVidWdXaXRoU3RyZWFtU3Rh
dHVzX2NhbGxiYWNrX2RhdGFfdCAqZGF0YSA9IChEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY2FsbGJh
Y2tfZGF0YV90KikgY2JfZGF0YTsKCWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsg
aSsrICkgewoJCURlYnVnV2l0aFN0cmVhbVN0YXR1c19jYWxsYmFja19zdHJlYW1fdCAqcyA9ICZk
YXRhLT5zdHJlYW1baV07CgkJaWYgKHMtPmlzX291dHB1dCAmJiAocy0+c2l6ZSA+IDApKSB7CgkJ
CW1lbWNweShzLT51c2VyX3B0ciwgcy0+YWxpZ25lZF9wdHIsIHMtPnNpemUpOwoJCX0KCQlmcmVl
KHMtPmFsaWduZWRfcHRyKTsKCX0KCWZyZWUoZGF0YSk7Cn0KCnN0YXRpYyBtYXhfYWN0aW9uc190
KiBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY29udmVydF9pbnRlcm5hbCgKCW1heF9maWxlX3QgKm1h
eGZpbGUsCglEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwKCXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCop
LAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhf
YWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwpOwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4g
TlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JTIGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkg
eyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vycm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsg
cmV0dXJuIE5VTEw7IH0gCgoJRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NhbGxiYWNrX2RhdGFfdCAq
Y2JfZGF0YSA9IE5VTEw7CglpbnQgdXNlX2NhbGxiYWNrID0gKGNhbGxiYWNrX2Z1bmMgIT0gTlVM
TCkgJiYgKGNhbGxiYWNrX2RhdGEgIT0gTlVMTCk7CglpZiAodXNlX2NhbGxiYWNrKSB7CgkJY2Jf
ZGF0YSA9IG1hbGxvYyhzaXplb2YoRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NhbGxiYWNrX2RhdGFf
dCkpOwoJCWlmIChjYl9kYXRhID09IE5VTEwpIHsKCQkJZnByaW50ZihzdGRlcnIsICJVbmFibGUg
dG8gYWxsb2NhdGUgbWVtb3J5IGZvciBzdHJlYW0gY2FsbGJhY2sgZGF0YSBpbiBmdW5jdGlvbiBE
ZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY29udmVydF9pbnRlcm5hbFxuIik7CgkJCXJldHVybiBOVUxM
OwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJCWNiX2RhdGEtPmNvdW50ICAgICA9IDA7
CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsKCQkqY2FsbGJhY2tfZnVuYyAgICAgPSAm
RGVidWdXaXRoU3RyZWFtU3RhdHVzX2NhbGxiYWNrX2ludGVybmFsOwoJfQoKCWludDY0X3QgcGFy
YW1fTiA9IGludGVyZmFjZV9hY3Rpb25zLT5wYXJhbV9OOwoJCgkvKiBjb2RlIGZvciBzY2FsYXIg
RGVidWdXaXRoU3RyZWFtU3RhdHVzS2VybmVsLnJ1bl9jeWNsZV9jb3VudCAqLwoJdWludDY0X3Qg
dGlja3NfRGVidWdXaXRoU3RyZWFtU3RhdHVzS2VybmVsID0gcGFyYW1fTjsKCW1heF9zZXRfdGlj
a3MoYWN0aW9ucywgIkRlYnVnV2l0aFN0cmVhbVN0YXR1c0tlcm5lbCIsIHBhcmFtX04pOwoJQ0hF
Q0tfRVJST1JTOwoJLyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBEZWJ1Z1dpdGhTdHJlYW1TdGF0
dXNLZXJuZWwucnVuX2N5Y2xlX2NvdW50Ki8KCQoJaW50NjRfdCB0bXBfMCA9IChwYXJhbV9OICog
NCk7CgkKCS8qIGNvZGUgZm9yIHN0cmVhbSB4ICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV94ID0g
dG1wXzA7CglpZiAoaW5zdHJlYW1fc2l6ZV94ID4gMCkgewoJCWNvbnN0IHVpbnQzMl90ICpzdHJl
YW1fcHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3g7CgkJaWYgKHVzZV9jYWxsYmFj
ayAmJiAoMSA9PSBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2Vf
YWN0aW9ucy0+aW5zdHJlYW1feCkpKSB7CgkJCXVpbnQzMl90ICphbGlnbmVkX2luc3RyZWFtX3gg
PSBtYWxsb2MoaW5zdHJlYW1fc2l6ZV94KTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1feCA9PSBO
VUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJyb3JzLCBfX0ZJTEVf
XywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVkIG1lbW9yeSBmb3Ig
c3RyZWFtICd4JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFt
W2NiX2RhdGEtPmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0
aW9ucy0+aW5zdHJlYW1feDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+
YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1feDsKCQkJKCZjYl9kYXRh
LT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+c2l6ZSAgICAgICAgPSBpbnN0cmVhbV9zaXplX3g7
CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMDsK
CQkJY2JfZGF0YS0+Y291bnQgKz0gMTsKCQkJbWVtY3B5KGFsaWduZWRfaW5zdHJlYW1feCwgaW50
ZXJmYWNlX2FjdGlvbnMtPmluc3RyZWFtX3gsIGluc3RyZWFtX3NpemVfeCk7CgkJCXN0cmVhbV9w
dHIgPSBhbGlnbmVkX2luc3RyZWFtX3g7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAi
eCIsIHN0cmVhbV9wdHIsIGluc3RyZWFtX3NpemVfeCk7CgkJQ0hFQ0tfRVJST1JTOwoJfQoJLyog
ZW5kIG9mIGNvZGUgZm9yIHN0cmVhbSB4ICovCgkKCWludDY0X3QgdG1wXzEgPSAocGFyYW1fTiAq
IDQpOwoJCgkvKiBjb2RlIGZvciBzdHJlYW0geSAqLwoJc2l6ZV90IG91dHN0cmVhbV9zaXplX3kg
PSB0bXBfMTsKCWlmIChvdXRzdHJlYW1fc2l6ZV95ID4gMCkgewoJCXVpbnQzMl90ICpzdHJlYW1f
cHRyID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHN0cmVhbV95OwoJCWlmICh1c2VfY2FsbGJhY2sg
JiYgKDEgPT0gRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2Fj
dGlvbnMtPm91dHN0cmVhbV95KSkpIHsKCQkJdWludDMyX3QgKmFsaWduZWRfb3V0c3RyZWFtX3kg
PSBtYWxsb2Mob3V0c3RyZWFtX3NpemVfeSk7CgkJCWlmIChhbGlnbmVkX291dHN0cmVhbV95ID09
IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhhY3Rpb25zLT5lcnJvcnMsIF9fRklM
RV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9jYXRlIGFsaWduZWQgbWVtb3J5IGZv
ciBzdHJlYW0gJ3knIik7CgkJCQlDSEVDS19FUlJPUlM7CgkJCX0KCQkJKCZjYl9kYXRhLT5zdHJl
YW1bY2JfZGF0YS0+Y291bnRdKS0+dXNlcl9wdHIgICAgPSAodWludDhfdCopIGludGVyZmFjZV9h
Y3Rpb25zLT5vdXRzdHJlYW1feTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRd
KS0+YWxpZ25lZF9wdHIgPSAodWludDhfdCopIGFsaWduZWRfb3V0c3RyZWFtX3k7CgkJCSgmY2Jf
ZGF0YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPnNpemUgICAgICAgID0gb3V0c3RyZWFtX3Np
emVfeTsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+aXNfb3V0cHV0ICAg
PSAxOwoJCQljYl9kYXRhLT5jb3VudCArPSAxOwoJCQlzdHJlYW1fcHRyID0gYWxpZ25lZF9vdXRz
dHJlYW1feTsKCQl9CgkJbWF4X3F1ZXVlX291dHB1dChhY3Rpb25zLCAieSIsIHN0cmVhbV9wdHIs
IG91dHN0cmVhbV9zaXplX3kpOwoJCUNIRUNLX0VSUk9SUzsKCX0KCS8qIGVuZCBvZiBjb2RlIGZv
ciBzdHJlYW0geSAqLwoJCglpZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDAp
IHsKCQkqY2FsbGJhY2tfZGF0YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZy
ZWUoY2JfZGF0YSk7Cgl9CglyZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2
b2lkIERlYnVnV2l0aFN0cmVhbVN0YXR1cygKCWludDY0X3QgcGFyYW1fTiwKCWNvbnN0IHVpbnQz
Ml90ICppbnN0cmVhbV94LAoJdWludDMyX3QgKm91dHN0cmVhbV95KQp7Cgkodm9pZCkgcHRocmVh
ZF9vbmNlKCZzbGljX2JzX2lzX2luaXRpYWxpc2VkLCBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfc3Rh
dGljX2luaXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBs
b2FkZWQiLCApOwoJbWF4X3J1bl90ICpydW4gPSBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfbm9uYmxv
Y2socGFyYW1fTiwgaW5zdHJlYW1feCwgb3V0c3RyZWFtX3kpOwoJQ0hFQ0tfTlVMTChydW4sICJV
bmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpE
ZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfbm9uYmxvY2soCglpbnQ2NF90IHBhcmFtX04sCgljb25zdCB1
aW50MzJfdCAqaW5zdHJlYW1feCwKCXVpbnQzMl90ICpvdXRzdHJlYW1feSkKewoJRGVidWdXaXRo
U3RyZWFtU3RhdHVzX2FjdGlvbnNfdCBpbnRlcmZhY2VfYWN0aW9uczsKCWludGVyZmFjZV9hY3Rp
b25zLnBhcmFtX04gPSBwYXJhbV9OOwoJaW50ZXJmYWNlX2FjdGlvbnMuaW5zdHJlYW1feCA9IGlu
c3RyZWFtX3g7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1feSA9IG91dHN0cmVhbV95OwoJ
KHZvaWQpIHB0aHJlYWRfb25jZSgmc2xpY19ic19pc19pbml0aWFsaXNlZCwgRGVidWdXaXRoU3Ry
ZWFtU3RhdHVzX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwoc3RvcmVkX21heGZpbGUsICJNYXhm
aWxlIHdhcyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVM
TDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
cyA9IERlYnVnV2l0aFN0cmVhbVN0YXR1c19jb252ZXJ0X2ludGVybmFsKHN0b3JlZF9tYXhmaWxl
LCAmaW50ZXJmYWNlX2FjdGlvbnMsIDEsICZjYl9mdW5jLCAmY2JfZGF0YSk7CglDSEVDS19OVUxM
KGFjdGlvbnMsICJVbmFibGUgdG8gYnVpbGQgYWN0aW9ucyIsIE5VTEwpOwoJbWF4X3ZhbGlkYXRl
KGFjdGlvbnMpOwoJQ0hFQ0tfRVJST1JTX1NUKGFjdGlvbnMsIE5VTEwpOwoJQ0hFQ0tfRVJST1JT
X1NUKHN0b3JlZF9lbmdpbmUsIE5VTEwpOwoJbWF4X3J1bl90ICpydW47CglpZiAoY2JfZnVuYyA9
PSBOVUxMKSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9jayhzdG9yZWRfZW5naW5lLCBhY3Rpb25z
KTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKHN0b3JlZF9lbmdp
bmUsIGFjdGlvbnMsIGNiX2Z1bmMsIGNiX2RhdGEpOwoJfQoJQ0hFQ0tfTlVMTChydW4sICJVbmFi
bGUgdG8gcnVuIGFjdGlvbnMiLCBOVUxMKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxM
KTsKCW1heF9hY3Rpb25zX2ZyZWUoYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9Cgp2b2lkIERlYnVn
V2l0aFN0cmVhbVN0YXR1c19ydW4oCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCURlYnVnV2l0aFN0
cmVhbVN0YXR1c19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfcnVuX3QgKnJ1
biA9IERlYnVnV2l0aFN0cmVhbVN0YXR1c19ydW5fbm9uYmxvY2soZW5naW5lLCBpbnRlcmZhY2Vf
YWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7Cglt
YXhfd2FpdChydW4pOwp9CgptYXhfcnVuX3QgKkRlYnVnV2l0aFN0cmVhbVN0YXR1c19ydW5fbm9u
YmxvY2soCgltYXhfZW5naW5lX3QgKmVuZ2luZSwKCURlYnVnV2l0aFN0cmVhbVN0YXR1c19hY3Rp
b25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxlID0gbWF4X2Vu
Z2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9pZCopID0gTlVM
TDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9u
cyA9IERlYnVnV2l0aFN0cmVhbVN0YXR1c19jb252ZXJ0X2ludGVybmFsKG1heGZpbGUsIGludGVy
ZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNiX2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25z
LCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBOVUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25z
KTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYg
KGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rp
b25zKTsKCX0gZWxzZSB7CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwg
YWN0aW9ucywgY2JfZnVuYywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0
byBydW4gYWN0aW9ucyIsIE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVy
biBydW47Cn0KCgovKioKICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rp
b24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAg
R3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9u
cyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWls
YWJsZSBpbiB0aGUgZ3JvdXAuCiAqLwp2b2lkIERlYnVnV2l0aFN0cmVhbVN0YXR1c19ydW5fZ3Jv
dXAobWF4X2dyb3VwX3QgKmdyb3VwLCBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfYWN0aW9uc190ICpp
bnRlcmZhY2VfYWN0aW9ucykKewoJbWF4X3J1bl90ICpydW4gPSBEZWJ1Z1dpdGhTdHJlYW1TdGF0
dXNfcnVuX2dyb3VwX25vbmJsb2NrKGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19O
VUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoK
LyoqCiAqIFxicmllZiBHcm91cCBydW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5j
dGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUg
YWN0aW9ucyB0byBydW4gb24gdGhlIGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3Vw
IGFuZCByZXR1cm4gaW1tZWRpYXRlbHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJl
IGNoZWNrZWQgd2l0aCA6Om1heF93YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dh
aXQgaXMgcHJvaGliaXRlZCB3aXRoIG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICog
c2VlIHRoZSA6Om1heF9ydW5fZ3JvdXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBl
eHBsYW5hdGlvbi4KICoKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFy
YW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhh
bmRsZSBvbiB0aGUgZXhlY3V0aW9uIHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBj
YXNlIG9mIGVycm9yLgogKi8KbWF4X3J1bl90ICpEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfcnVuX2dy
b3VwX25vbmJsb2NrKG1heF9ncm91cF90ICpncm91cCwgRGVidWdXaXRoU3RyZWFtU3RhdHVzX2Fj
dGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhf
Z3JvdXBfZ2V0X21heF9maWxlKGdyb3VwKTsKCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBEZWJ1
Z1dpdGhTdHJlYW1TdGF0dXNfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0
aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJ
aWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMpKSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShh
Y3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0gbWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwg
YWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8q
KgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGlu
dGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBccGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkg
b2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJhbSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBU
aGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4uCiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9u
cyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4gIFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlv
bnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBlbmdhcnJheS4KICovCnZvaWQgRGVidWdXaXRo
U3RyZWFtU3RhdHVzX3J1bl9hcnJheShtYXhfZW5nYXJyYXlfdCAqZW5nYXJyYXksIERlYnVnV2l0
aFN0cmVhbVN0YXR1c19hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zW10pCnsKCW1heF9ydW5f
dCAqcnVuID0gRGVidWdXaXRoU3RyZWFtU3RhdHVzX3J1bl9hcnJheV9ub25ibG9jayhlbmdhcnJh
eSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFk
dmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rpb24gZm9yIHRoZSBpbnRlcmZhY2UgJ2Rl
ZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVuIHRoZSBhcnJheSBvZiBhY3Rpb25zIG9u
IHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJuIGltbWVkaWF0ZWx5LgogKiBUaGUgbGVu
Z3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXku
CiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUgY2hlY2tlZCBlaXRoZXIgYnkgOjptYXhf
d2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhhdCBvbmUgb2YgdGhlc2UgKm11c3QqIGJl
IGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9yeSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAq
IFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBvZiBkZXZpY2VzIHRvIHVzZS4KICogXHBh
cmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFycmF5IG9mIGFjdGlvbnMgdG8gcnVuLgog
KiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRpb24gc3RhdHVzIG9mIHRoZSBhY3Rpb25z
LCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwptYXhfcnVuX3QgKkRlYnVnV2l0aFN0cmVh
bVN0YXR1c19ydW5fYXJyYXlfbm9uYmxvY2sobWF4X2VuZ2FycmF5X3QgKmVuZ2FycmF5LCBEZWJ1
Z1dpdGhTdHJlYW1TdGF0dXNfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9uc1tdKQp7CgltYXhf
ZmlsZV90ICptYXhmaWxlID0gbWF4X2VuZ2FycmF5X2dldF9tYXhfZmlsZShlbmdhcnJheSwgMCk7
CglpbnQgaTsKCW1heF9hY3RhcnJheV90ICphY3RhcnJheSA9IG1heF9hY3RhcnJheV9pbml0KG1h
eGZpbGUsIGVuZ2FycmF5LT5zaXplKTsKCWlmIChhY3RhcnJheSA9PSBOVUxMKSByZXR1cm4gTlVM
TDsKCW1heF9hY3Rpb25zX3QgKiphcnJfYWN0aW9ucyA9IG1hbGxvYyhlbmdhcnJheS0+c2l6ZSAq
IHNpemVvZihtYXhfYWN0aW9uc190KikpOwoJZm9yICggaSA9IDAgOyBpIDwgYWN0YXJyYXktPnNp
emU7IGkrKyApIHsKCQltYXhfYWN0aW9uc190ICphY3Rpb25zID0gRGVidWdXaXRoU3RyZWFtU3Rh
dHVzX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNlX2FjdGlvbnNbaV0sIDEsIE5V
TEwsIE5VTEwpOwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJCWFycl9hY3Rp
b25zW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3RhcnJheSwgaSwgYWN0aW9ucyk7
Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9uYmxvY2soZW5nYXJyYXksIGFj
dGFycmF5KTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5zaXplIDsgaSsrICkgeyBtYXhf
YWN0aW9uc19mcmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2FjdGFycmF5X2ZyZWUoYWN0YXJy
YXkpOwoJZnJlZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9CgoKLyoqCiAqIFxicmllZiBD
b252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVjdCBpbnRvIGEgZHluYW1pYy1p
bnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5vdGUgdGhhdCB0aGlzIGlzIGFu
IGludGVybmFsIHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhlciBmdW5jdGlvbnMgaW4gdGhl
IHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1heGZpbGUgVGhlIG1heGZpbGUg
dG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgaW50ZXJmYWNlLXNw
ZWNpZmljIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBkeW5hbWljLWludGVyZmFjZSBh
Y3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4X2FjdGlvbnNf
dCogRGVidWdXaXRoU3RyZWFtU3RhdHVzX2NvbnZlcnQobWF4X2ZpbGVfdCAqbWF4ZmlsZSwgRGVi
dWdXaXRoU3RyZWFtU3RhdHVzX2FjdGlvbnNfdCAqaW50ZXJmYWNlX2FjdGlvbnMpCnsKCXJldHVy
biBEZWJ1Z1dpdGhTdHJlYW1TdGF0dXNfY29udmVydF9pbnRlcm5hbChtYXhmaWxlLCBpbnRlcmZh
Y2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19FUlJPUlNfU1QKI3Vu
ZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 5, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 0, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 1, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 2, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 7, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 12, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 21, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 9, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 10, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 11, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 13, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 20, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 15, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 16, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 18, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 19, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(DebugWithStreamStatusKernel, 17, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02145d5250e300b3e302522899741829cd922f9f97fe021464556fa44c9a54a82db814109d2b7c7e48f5297a")
#endif

